name: Build and Release
on:
  push:
    branches: [ main ]
    paths-ignore: ['pubspec.yaml']
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Conditional step to prevent execution for automated commits
      - name: Check for automated commit
        id: check_commit
        run: |
          if git log -1 --pretty=%B | grep -q 'Increment version to'; then
            echo "Automated commit detected, skipping the rest of the workflow."
            echo "::set-output name=skip::true"
          else
            echo "::set-output name=skip::false"
          fi


      - name: Increment version in pubspec.yaml
        if: steps.check_commit.outputs.skip == 'false'
        run: |
          # Extract the current version and build number
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          BASE_VERSION=$(echo $VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $VERSION | cut -d'+' -f2)

          # Increment the build number
          NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
          
          # Combine them to form the new version
          NEW_VERSION="$BASE_VERSION+$NEW_BUILD_NUMBER"
          
          echo "Old version: $VERSION"
          echo "New version: $NEW_VERSION"
          
          # Update pubspec.yaml with the new version
          sed -i "s/version: $VERSION/version: $NEW_VERSION/" pubspec.yaml
          
          # Use git to commit and push the change
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pubspec.yaml
          git commit -m "Increment version to $NEW_VERSION"
          git push

      - name: Setup Environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl git unzip xz-utils zip libglu1-mesa ninja-build libgtk-3-dev

      - name: Read pubspec.yaml and Setup Flutter Version
        id: app_version
        run: |
          APP_VERSION=$(grep 'version: ' "./pubspec.yaml" | awk '{print $2}')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT

    outputs:
      APP_VERSION: ${{ steps.app_version.outputs.APP_VERSION }}

  build-appbundle:
    needs: setup
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [arm, arm64, x64]
        cpu: [generic]
    outputs:
      ARCH: ${{ matrix.arch }}
      CPU: ${{ matrix.cpu }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable $HOME/flutter
          echo "$HOME/flutter/bin" >> $GITHUB_PATH

      - run: |
          flutter doctor
          flutter pub get

      - uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-cache-

      - name: Install flutterpi_tool
        run: |
          flutter pub global activate flutterpi_tool
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH
          
      - name: Build App Bundle
        run: |
          flutterpi_tool build --arch=${{ matrix.arch }} --cpu=${{ matrix.cpu }} --release

      - name: Archive release build
        run: tar -czvf hallaos-${{ matrix.arch }}-${{ matrix.cpu }}-release.tar.gz ./build/flutter_assets/

      - name: Upload Artifact to Workflow Run
        uses: actions/upload-artifact@v2
        with:
          name: hallaos-${{ needs.setup.outputs.APP_VERSION }}-${{ matrix.arch }}-${{ matrix.cpu }}-release.tar.gz
          path: ./hallaos-${{ needs.setup.outputs.APP_VERSION }}-${{ matrix.arch }}-${{ matrix.cpu }}-release.tar.gz

  build-native:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: [apk]
    outputs:
      MODULES: ${{ matrix.modules }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Flutter
        run: |
          git clone https://github.com/flutter/flutter.git -b stable $HOME/flutter
          echo "$HOME/flutter/bin" >> $GITHUB_PATH
      
      - run: |
          flutter doctor
          flutter pub get

      - name: Build Apk
        run: |
          flutter build ${{ matrix.modules }} --release

      - name: Upload Artifact to Workflow Run
        uses: actions/upload-artifact@v2
        with:
          name: hallaos-${{ needs.setup.outputs.APP_VERSION }}-${{ matrix.modules }}-release.apk
          path: ./build/app/outputs/flutter-apk/app-release.apk

  create-release:
    needs: [setup, build-appbundle, build-native]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/releases

      - name: List downloaded artifacts
        run: |
          ls -lR releases/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.APP_VERSION }}
          release_name: Release ${{ needs.setup.outputs.APP_VERSION }}
          draft: false
          prerelease: false

      - name: Upload appbundle release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/releases/hallaos-${{ needs.setup.outputs.APP_VERSION }}-release.tar.gz
          asset_name: hallaos-${{ needs.setup.outputs.APP_VERSION }}-release.tar.gz
          asset_content_type: application/gzip


      - name: Upload native release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/releases/app-release.apk
          asset_name: hallaos-${{ needs.setup.outputs.APP_VERSION }}-release.apk
          asset_content_type: application/octet-stream



